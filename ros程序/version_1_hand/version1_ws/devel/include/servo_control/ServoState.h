// Generated by gencpp from file servo_control/ServoState.msg
// DO NOT EDIT!


#ifndef SERVO_CONTROL_MESSAGE_SERVOSTATE_H
#define SERVO_CONTROL_MESSAGE_SERVOSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_control
{
template <class ContainerAllocator>
struct ServoState_
{
  typedef ServoState_<ContainerAllocator> Type;

  ServoState_()
    : id()
    , pos()
    , torque()  {
    }
  ServoState_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , pos(_alloc)
    , torque(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _id_type;
  _id_type id;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _pos_type;
  _pos_type pos;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _torque_type;
  _torque_type torque;




  typedef boost::shared_ptr< ::servo_control::ServoState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_control::ServoState_<ContainerAllocator> const> ConstPtr;

}; // struct ServoState_

typedef ::servo_control::ServoState_<std::allocator<void> > ServoState;

typedef boost::shared_ptr< ::servo_control::ServoState > ServoStatePtr;
typedef boost::shared_ptr< ::servo_control::ServoState const> ServoStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_control::ServoState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_control::ServoState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace servo_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'servo_control': ['/home/zhong/version_1_hand/version1_ws/src/servo_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::servo_control::ServoState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_control::ServoState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_control::ServoState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_control::ServoState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_control::ServoState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_control::ServoState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_control::ServoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37c0e1ad113d34ab23273f03f228e896";
  }

  static const char* value(const ::servo_control::ServoState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37c0e1ad113d34abULL;
  static const uint64_t static_value2 = 0x23273f03f228e896ULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_control::ServoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_control/ServoState";
  }

  static const char* value(const ::servo_control::ServoState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_control::ServoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[] id\n\
int16[] pos\n\
int16[] torque\n\
";
  }

  static const char* value(const ::servo_control::ServoState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_control::ServoState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_control::ServoState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_control::ServoState_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "torque[]" << std::endl;
    for (size_t i = 0; i < v.torque.size(); ++i)
    {
      s << indent << "  torque[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.torque[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_CONTROL_MESSAGE_SERVOSTATE_H
